{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server AutomartAPI. Showing the AutoMartAPI backend APIS",
    "version": "1.0.0",
    "title": "AutoMart-APi",
    "termsOfService": "localhost:3000",
    "contact": {
      "email": "williamtrans2011@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "user",
      "description": "User End Points"
    },
    {
      "name": "car",
      "description": "Car End POints"
    },
    {
      "name": "order",
      "description": "Order Endpoints"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "description": "End point for creating a new user",
        "operationId": "addUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "description": "End point for creating a new user",
        "operationId": "registerUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/car": {
      "post": {
        "tags": [
          "car"
        ],
        "summary": "Adds a new Car",
        "description": "End point for creating a new Car",
        "operationId": "addCar",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "automart_auth": [
              "write:cars",
              "read:cars"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "car"
        ],
        "summary": "Returns list of cars",
        "description": "Returns list of",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "No cars returned",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/car/{carId}": {
      "get": {
        "tags": [
          "car"
        ],
        "summary": "Find car by ID",
        "description": "Returns a single car",
        "operationId": "getCarById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "description": "ID of car to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "Car not found"
          }
        }
      },
      "delete": {
        "tags": [
          "car"
        ],
        "summary": "Deletes a car",
        "description": "",
        "operationId": "deleteCar",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "carId",
            "in": "path",
            "description": "Car id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Car deleted successfully"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/car/{carId}/price": {
      "patch": {
        "tags": [
          "car"
        ],
        "summary": "Update price by Id",
        "description": "Update price single car",
        "operationId": "updateCarPrice",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Car id to update"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/car/{carId}/status": {
      "patch": {
        "tags": [
          "car"
        ],
        "summary": "Update status by Id",
        "description": "Update Status single car",
        "operationId": "updateCarStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "carId",
            "in": "path",
            "description": "Car id to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Adds a new Purchase Order",
        "description": "End point for creating a new PO",
        "operationId": "addPo",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order Object that needs to be created",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Un Authorized"
          },
          "404": {
            "description": "Invalid Car Id"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/order/{orderId}/status": {
      "patch": {
        "tags": [
          "order"
        ],
        "summary": "Update Order status by Id",
        "description": "Update Status single order",
        "operationId": "updateOrderStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/order/{orderId}/price": {
      "patch": {
        "tags": [
          "order"
        ],
        "summary": "Update Order Price by Id",
        "description": "Update Price single order",
        "operationId": "updateOrderPrice",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Car": {
      "type": "object",
      "required": [
        "model",
        "manufacturer",
        "price",
        "body_type",
        "state"
      ],
      "properties": {
        "model": {
          "type": "string",
          "example": "x-6"
        },
        "manufacturer": {
          "type": "string",
          "example": "benz"
        },
        "price": {
          "type": "number"
        },
        "body_type": {
          "type": "string",
          "example": "[car, suv, pick-up]"
        },
        "state": {
          "type": "string",
          "description": "car status",
          "enum": [
            "new",
            "used"
          ]
        },
        "status": {
          "type": "string",
          "default": "available",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "car": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status"
        }
      },
      "xml": {
        "name": "Status"
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Amount"
        }
      },
      "xml": {
        "name": "Price"
      }
    },
    "SignIn": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "email",
          "example": "name@example.com"
        },
        "password": {
          "type": "string",
          "description": "password"
        }
      },
      "xml": {
        "name": "Price"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}